job "telemetry" {
  datacenters = ["dc1"]
  type        = "service"
  group "telemetry" {
    count = 1
    {{/*
      If there are more than one node in the cluster, 
        then this constraint ensures that telemetry job always run on client node,

      The issue originates from ownerships of files created by victoriametric on nfs.
        - If server starts the job, files created is having (root, nomad_nfs) as ownership and group ownership
        - If client starts the job, files created is having (nomad_nfs, nomad_nfs) as ownership and group ownership,
        so, different node class is unable to restart the victoriametric task.
      
      Incase multiple nodes are in the cluster,
        Assumption: There will be more client nodes than server.
        so constrain the job to always get scheduled on client node.
    */}}
    {{ if and (not .IsLocal) (ne .TargetCount 1) }}
    constraint {
      attribute = "${node.class}"
      value     = "web_ingress"
      operator = "!="
    }
    {{ end }}

    network {
      port "vicky-http" {
        to = 8428
      }

      port "grafana-http" {
        to = 3000
      }

      port "vicky-logs-http" {
        to = 9428
      }
    }

    task "victoriametrics" {
      driver = "docker"

      service {
        name     = "vicky-web"
        provider = "nomad"
        port     = "vicky-http"
        tags = [
          "traefik.enable=true",
          "traefik.http.routers.vicky-http.rule=PathPrefix(`/victoriametrics`)",
          "traefik.http.routers.vicky-http.priority=10"
        ]
      }

      config {
        {{ with .Docker }}
        image = "{{ .Registry }}/victoria-metrics:tags-v1.102.1-1-g76115c611f"
        auth {
            username = "{{ .DockerUsername }}"
            password = "{{ .DockerPassword }}"
            server_address = "{{ .Registry }}"
          }
        {{ end }}
        
        ports = ["vicky-http"]
        args = [
          "--storageDataPath={{ .NomadMonitoringDir }}/victoriametric",
          "--retentionPeriod=10d",
          "--httpListenAddr=:${NOMAD_PORT_vicky_http}",
          "--promscrape.config={{ .NomadMonitoringDir }}/node_discovery/prometheus.yaml",
          "--http.pathPrefix=/victoriametrics",
          "--promscrape.fileSDCheckInterval=5s"
        ]
        {{ if .IsLocal }}
        extra_hosts = ["host.docker.internal:host-gateway"]
        {{ end }}
        volumes = [
          {{ with .Docker }}
          "{{ .ShareDir }}:/model_bazaar"
          {{ end }}
        ]
      }
      resources {
        cpu    = 256
        memory = 600
      }
    }

    task "victorialogs" {
      driver = "docker"

      service {
        name     = "vicky-logs"
        port     = "vicky-logs-http"
        provider = "nomad"
        tags = [
          "traefik.enable=true",
          "traefik.http.routers.vicky-logs-http.rule=PathPrefix(`/victorialogs`)",
          "traefik.http.routers.vicky-logs-http.priority=10"
        ]
      }

      config {
        image = "docker.io/victoriametrics/victoria-logs:latest"
        ports = ["vicky-logs-http"]
        args = [
          "--storageDataPath={{ .NomadMonitoringDir }}/victorialogs",
          "--retentionPeriod=30d",
          "--httpListenAddr=:${NOMAD_PORT_vicky_logs_http}",
          "--http.pathPrefix=/victorialogs"
        ]
        {{ if .IsLocal }}
        extra_hosts = ["host.docker.internal:host-gateway"]
        {{ end }}
        volumes = [
          {{ with .Docker }}
          "{{ .ShareDir }}:/model_bazaar"
          {{ end }}
        ]
      }
      resources {
        cpu    = 256
        memory = 600
      }
    }

    task "vector" {
      driver = "docker"

      lifecycle {
        hook = "poststart"
        sidecar = true
      }

      env {
        {{ if .IsLocal }}
        PRIVATE_MODEL_BAZAAR_ENDPOINT = "http://host.docker.internal/"
        {{ else }}
        PRIVATE_MODEL_BAZAAR_ENDPOINT = "http://{{ .ModelBazaarPrivateHost }}/"
        {{ end }}
      }

      config {
        image = "timberio/vector:nightly-distroless-libc"

        {{ if not .IsLocal }}
        group_add = ["4646"]
        {{ end }}

        volumes = [
          {{ with .Docker }}
          "{{ .ShareDir }}:/model_bazaar",
          {{ end }}
          "local/vector-config.yaml:/etc/vector/vector.yaml"
        ]
      }

      template {
        data = <<EOF
# the checkpoints for different logs will be stored in this directory
data_dir: /model_bazaar/logs

sources:
  # fetching logs for all models
  training_logs:
    type: file
    include:
      - "/model_bazaar/logs/*/train.log"
    read_from: beginning

  deployment_logs:
    type: file
    include:
      - "/model_bazaar/logs/*/deployment.log"
    read_from: beginning

transforms:
  parse_logs:
    # loads the json line as it is. we can add more fields here if needed
    # for example the IP address of the machine where the logs are generated
    type: remap
    inputs:
      - training_logs
      - deployment_logs
    source: |
      . = parse_json!(.message)

  # create two different sources for debug and non-debug logs
  filter_debug_logs:
    type: filter
    inputs:
      - parse_logs
    condition: |
      .level == "DEBUG"
  
  filter_non_debug_logs:
    type: filter
    inputs:
      - parse_logs
    condition: |
      .level != "DEBUG"

sinks:
  # two different sinks for debug and non-debug logs.
  # the number of debug logs can be high hence, we store them for a short period
  # retention period of debug logs is 48 hours, non debug logs are stored for 30 days
  debug_logs:
    type: http
    inputs:
      - filter_debug_logs
    uri: "${PRIVATE_MODEL_BAZAAR_ENDPOINT}victorialogs/insert/jsonline?_stream_fields=model_id,service_type&_msg_field=_msg&_time_field=_time&extra_fields=retention=48h"
    encoding:
      codec: json
    framing:
      method: newline_delimited
    request:
      headers:
        Content-Type: application/json
    healthcheck:
      enabled: false

  other_logs:
    type: http
    inputs:
      - filter_non_debug_logs
    uri: "${PRIVATE_MODEL_BAZAAR_ENDPOINT}victorialogs/insert/jsonline?_stream_fields=model_id,service_type&_msg_field=_msg&_time_field=_time&extra_fields=retention=30d"
    encoding:
      codec: json
    framing:
      method: newline_delimited
    request:
      headers:
        Content-Type: application/json
    healthcheck:
      enabled: false
EOF
        destination = "local/vector-config.yaml"
      }

      resources {
        cpu    = 256
        memory = 300
      }
    }

    task "grafana" {
      lifecycle {
        hook = "poststart"
        sidecar = true
      }

      driver = "docker"

      env {
        GF_LOG_LEVEL          = "DEBUG"
        GF_LOG_MODE           = "console"
        GF_SECURITY_ADMIN_USER = "{{ .AdminUsername }}"
        GF_SECURITY_ADMIN_EMAIL = "{{ .AdminEmail }}"
        GF_SECURITY_ADMIN_PASSWORD = "{{ .AdminPassword }}"
        GF_DATABASE_URL = "{{ .GrafanaDbUrl }}"
        GF_SERVER_ROOT_URL = "%(protocol)s://%(domain)s:%(http_port)s/grafana/"
        GF_SERVER_SERVE_FROM_SUB_PATH = "true"
        GF_SERVER_HTTP_PORT   = "${NOMAD_PORT_http}"
        GF_PATHS_PROVISIONING = "/local/grafana/provisioning"
        GF_PATHS_DATA = "{{ .NomadMonitoringDir }}/grafana"
        GF_SECURITY_ALLOW_EMBEDDING=true
      }

      config {
        {{ with .Docker }}
        image = "{{ .Registry }}/grafana:main-ubuntu"
        auth {
          username = "{{ .DockerUsername }}"
          password = "{{ .DockerPassword }}"
          server_address = "{{ .Registry }}"
        }
        group_add = ["4646"]
        ports = ["grafana-http"]
        volumes = [
          "{{ .ShareDir }}:/model_bazaar"
        ]
        {{ end }}
      }

      service {
        name = "grafana"
        port = "grafana-http"
        provider = "nomad"
        tags = [
          "traefik.enable=true",
          "traefik.http.routers.grafana-http.rule=PathPrefix(`/grafana`)",
          "traefik.http.routers.grafana-http.priority=10"
        ]
      }

      resources {
        cpu    = 256
        memory = 300
      }

      template {
        data        = <<EOF
apiVersion: 1
datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    {{ if .IsLocal }}
    url: http://host.docker.internal/victoriametrics
    {{ else }}
    url: http://{{ .ModelBazaarPrivateHost }}/victoriametrics
    {{ end }}
    isDefault: true
    editable: false
EOF
        destination = "/local/grafana/provisioning/datasources/datasources.yaml"
      }

      template {
        data        = <<EOF
apiVersion: 1
providers:
  - name: dashboards
    type: file
    disableDeletion: true
    updateIntervalSeconds: 10
    allowUiUpdates: true
    options:
      foldersFromFilesStructure: true
      path: {{ .NomadMonitoringDir }}/grafana_dashboards
EOF
        destination = "/local/grafana/provisioning/dashboards/dashboards.yaml"
      }
    }
  }
}