name: Run Integration Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  merge_group:
    types: [checks_requested]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PRODUCT_VERSION: "latest"

jobs:
  integration-tests:
    runs-on: ubuntu-latest-16-cores
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: model_bazaar
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h localhost -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 1
        done

    - name: Create Extension
      run: |
        export PGPASSWORD='password'
        psql -h localhost -U postgres -d model_bazaar -c "CREATE EXTENSION IF NOT EXISTS pgcrypto;"

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'

    - name: Set up Go >=1.23.1
      uses: actions/setup-go@v5
      with:
        go-version: '>=1.23.1'

    - name: Setup Python and Install Dependencies
      # We need to run the backend in sudo for the delete endpoint to work, thus
      # we need to install the requirements for the backend job in sudo. However,
      # since the other jobs (train_job, cache_job, etc) are spun up as seperate
      # processes, we also need so install their requirements in the virtual env
      # We are adding the symlink because otherwise when we run python with sudo 
      # it defaults to the /usr/bin/python, which is version 3.12, which prevents 
      # it from installing thirdai.
      run: |
        python -m venv ${{ github.workspace }}/venv
        source venv/bin/activate
        pip install -r thirdai_platform_py/requirements.txt
    
    - name: Update openssl
      run: |
        sudo pip install --upgrade cryptography pyopenssl
        sudo apt-get install --only-upgrade openssl

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
    - name: Install PostgreSQL client version 17.x
      run: |
          sudo apt-get update && \
          sudo apt-get install -y wget gnupg2 lsb-release && \
          echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list && \
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - && \
          sudo apt-get update && \
          sudo apt-get install -y postgresql-client-17 && \
          sudo ln -s /usr/lib/postgresql/17/bin/pg_dump /usr/bin/pg_dump --force
          
    - name: Setup Nomad
      uses: hashicorp/setup-nomad@main
      id: setup
      with:
        version: ${{ env.PRODUCT_VERSION }}

    - name: Start Nomad in Development Mode
      run: |
        NOMAD_PATH=$(which nomad)
        nohup sudo $NOMAD_PATH agent -dev -config="local_setup/agent.hcl" > nomad.log 2>&1 &
    
    - name: Verify Nomad Cluster
      run: |
        NOMAD_PATH=$(which nomad)
        echo $NOMAD_PATH
        sleep 10 && $NOMAD_PATH node status

    - name: Install Traefik
      run: |
        wget https://github.com/traefik/traefik/releases/download/v3.1.2/traefik_v3.1.2_linux_amd64.tar.gz
        sudo tar -xf traefik_v3.1.2_linux_amd64.tar.gz -C /usr/local/bin

    - name: Run Traefik
      run: |
        cd local_setup
        nohup sudo bash launch_traefik.sh > traefik.log 2>&1 &
        cd ..

    - name: Install Vault
      run: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update
        sudo apt-get install -y vault

    - name: Start Vault Server
      run: nohup sudo vault server --dev --dev-root-token-id="00000000-0000-0000-0000-000000000000" > vault.log 2>&1 &

    - name: Create Directories for Share and Test
      run: |
        mkdir -p $HOME/nfs/dir
        sudo chmod -R 777 $HOME/nfs/dir
        sudo chmod +t $HOME/nfs/dir
        sudo chmod g+s $HOME/nfs/dir
        echo "SHARE_DIR=$HOME/nfs/dir" >> $GITHUB_ENV
        echo "GENAI_KEY=${{ secrets.GENAI_KEY }}" >> $GITHUB_ENV

    - name: Create Google Application credentials file
      run: |
        echo '${{ secrets.GCP_CREDENTIALS_FILE }}' > $HOME/nfs/dir/google_license.json

    - name: Write All Environment Variables to .env File
      run: |
        echo "LICENSE_PATH=${{ github.workspace }}/thirdai_platform_py/tests/platform_test_license.json" >> $GITHUB_WORKSPACE/.env
        echo "JWT_SECRET=CsnCr3lebs9eJQ" >> $GITHUB_WORKSPACE/.env
        echo "SENDGRID_KEY=sendgrid-key" >> $GITHUB_WORKSPACE/.env
        echo "GENAI_KEY=${{ secrets.GENAI_KEY }}" >> $GITHUB_WORKSPACE/.env
        echo "ADMIN_USERNAME=admin" >> $GITHUB_WORKSPACE/.env
        echo "ADMIN_MAIL=admin@mail.com" >> $GITHUB_WORKSPACE/.env
        echo "ADMIN_PASSWORD=password" >> $GITHUB_WORKSPACE/.env
        echo "PLATFORM=local" >> $GITHUB_WORKSPACE/.env
        echo "AIRGAPPED=True" >> $GITHUB_WORKSPACE/.env
        echo "DATABASE_URI=postgresql://postgres:password@localhost:5432/model_bazaar" >> $GITHUB_WORKSPACE/.env
        echo "NOMAD_ENDPOINT=http://localhost:4646/" >> $GITHUB_WORKSPACE/.env
        echo "PUBLIC_MODEL_BAZAAR_ENDPOINT=http://localhost:80/" >> $GITHUB_WORKSPACE/.env
        echo "PRIVATE_MODEL_BAZAAR_ENDPOINT=http://localhost:80/" >> $GITHUB_WORKSPACE/.env
        echo "HASHICORP_VAULT_ENDPOINT=http://127.0.0.1:8200" >> $GITHUB_WORKSPACE/.env
        echo "HASHICORP_VAULT_TOKEN=00000000-0000-0000-0000-000000000000" >> $GITHUB_WORKSPACE/.env
        echo "SHARE_DIR=$HOME/nfs/dir" >> $GITHUB_WORKSPACE/.env
        echo "PYTHON_PATH=${{ github.workspace }}/venv/bin/python" >> $GITHUB_WORKSPACE/.env
        echo "PLATFORM_DIR=${{ github.workspace }}/thirdai_platform_py" >> $GITHUB_WORKSPACE/.env
        echo "AZURE_ACCOUNT_NAME=${{ secrets.AZURE_ACCOUNT_NAME }}" >> $GITHUB_WORKSPACE/.env
        echo "AZURE_ACCOUNT_KEY=${{ secrets.AZURE_ACCOUNT_KEY }}" >> $GITHUB_WORKSPACE/.env
        echo "GCP_CREDENTIALS_FILE=$HOME/nfs/dir/google_license.json" >> $GITHUB_WORKSPACE/.env
        echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> $GITHUB_WORKSPACE/.env
        echo "AWS_ACCESS_SECRET=${{ secrets.AWS_ACCESS_SECRET }}" >> $GITHUB_WORKSPACE/.env
        echo "AWS_REGION_NAME=us-east-2" >> $GITHUB_WORKSPACE/.env
        echo "TASK_RUNNER_TOKEN=N/A" >> $GITHUB_WORKSPACE/.env
        echo "IDENTITY_PROVIDER=default" >> $GITHUB_WORKSPACE/.env
        echo "DOCKER_REGISTRY=none" >> $GITHUB_WORKSPACE/.env
        echo "DOCKER_USERNAME=none" >> $GITHUB_WORKSPACE/.env
        echo "DOCKER_PASSWORD=none" >> $GITHUB_WORKSPACE/.env
        echo "GRAFANA_DB_URL=none" >> $GITHUB_WORKSPACE/.env

    - name: Launch Backend
      run: |
        source ${{ github.workspace }}/venv/bin/activate
        cd $GITHUB_WORKSPACE/thirdai_platform
        go build cmd/model_bazaar/main.go
        nohup sudo ./main --env ../.env --skip_telemetry --skip_cache > model_bazaar_log.log 2>&1 &
    
    - name: List files in local_setup
      run: ls -la local_setup
    
    - name: Launch Autoscaler
      run: |
        cd local_setup
        NOMAD_PATH=$(which nomad)
        sudo bash launch_nomad_jobs.sh $NOMAD_PATH

    - name: Run Tests
      run: |
        source ${{ github.workspace }}/venv/bin/activate
        cd $GITHUB_WORKSPACE/thirdai_platform
        go test ./integration_tests -v -timeout 2h

    - name: Display Logs
      if: always()
      run: |
        echo "Nomad Logs:"
        cat nomad.log
        echo "Backend Logs:"
        cat $GITHUB_WORKSPACE/thirdai_platform/model_bazaar_log.log
        echo "Traefik Logs:"
        cat local_setup/traefik.log
        echo "Vault Logs:"
        cat vault.log
        
        bash local_setup/fetch_nomad_logs.sh

    - name: Stop Services
      if: always()
      run: |
        sudo systemctl stop postgresql
        sudo killall nomad
        sudo killall vault
        sudo killall traefik